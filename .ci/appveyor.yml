environment:
  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python
    - PYTHON_VERSION: "3.6" # currently 3.6.5
      CONDA: "C:\\Miniconda36-x64"
      MARKER: "not grid"
      ALLOW_FAIL: false

    - PYTHON_VERSION: "3.6" # currently 3.6.5
      CONDA: "C:\\Miniconda36-x64"
      MARKER: "grid"
      ALLOW_FAIL: false

matrix:
  allow_failures:
    # every matrix entry where 'ALLOW_FAIL: true' is in is allowed to fail
    - ALLOW_FAIL: true

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
    - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
    - set PATH=%CONDA%;%CONDA%\Scripts;%PATH%
    - conda config --set always_yes yes --set changeps1 no
    - conda config --add channels conda-forge
    # Install OpenGL
    - ps: ./.ci/install_mesa.bat
    - conda install --only-deps pymor
    # these ones are not in the 0.5.1 conda build yet
    - conda install pyevtk gmsh
    # these are build/test-time deps for the conda package, not runtime
    - conda install cython pytest pytest-cov

build_script:
    - set PATH=%CONDA%;%CONDA%\Scripts;%PATH%
    - conda list
    - set PYTHONPATH=%cd%\src;%PYTHONPATH%;
    - python setup.py build_ext -i

test_script:
    - set PYTHONPATH=%cd%\src;%PYTHONPATH%;
    - py.test -r sxX -k "%MARKER%" -s -v 

#after_test:
  # If tests are successful, create binary packages for the project.
  #- "%CMD_IN_ENV% python setup.py bdist_wheel"
  #- "%CMD_IN_ENV% python setup.py bdist_wininst"
  #- "%CMD_IN_ENV% python setup.py bdist_msi"
  #- ps: "ls dist"

#artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  #- path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
